@startuml
!define AWSPUML https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!includeurl AWSPUML/AWSCommon.puml
!includeurl AWSPUML/SecurityIdentityCompliance/Cognito.puml
!includeurl AWSPUML/ApplicationIntegration/APIGateway.puml
!includeurl AWSPUML/ApplicationIntegration/SimpleNotificationService.puml
!includeurl AWSPUML/ApplicationIntegration/SimpleQueueService.puml
!includeurl AWSPUML/Compute/Lambda.puml
!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.4.0
!include ICONURL/common.puml
!includeurl ICONURL/devicons2/mongodb.puml
!includeurl ICONURL/devicons2/angularjs.puml


actor "Usuário" as User
DEV2_ANGULARJS(angular, "SPA\nAngular")
DEV2_MONGODB(mongodb, "<b>Banco de Dados\n<b>MongoDB", "Database") #YellowGreen
DEV2_MONGODB(charts, "<b>Dashboards\n<b>MongoDB Atlas\n<b>Charts") #YellowGreen
Cognito(cognito, "Cognito", "Autentica usuários")
APIGateway(apiGateway, "API Gateway", "Recebe LIRAa via REST API")
Lambda(validationLambda, "Validation Lambda", "Valida dados do LIRAa")
SimpleNotificationService(validationSNS, "Validation SNS", "Topico dados validados")
SimpleQueueService(validationSQS, "Validation SQS", "Recebe os dados validados para processamento")
Lambda(processingLambda, "Processing Lambda", "Processa os dados do LIRAa")

User --> angular : Acessa SPA
angular --> cognito : Autenticação
angular --> apiGateway : Envia dados LIRAa\nvia REST API
apiGateway -> cognito: Valida token
cognito -> apiGateway : Autoriza acesso
apiGateway -->  validationLambda
validationLambda --> validationSNS
validationSNS --> validationSQS
validationSQS --> processingLambda
processingLambda --> mongodb

charts --> mongodb
User -------> charts
@enduml